<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.cacedo.jira</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>4989EA22-8408-4AAD-BA8E-3DBB4D2035E7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>BBBC73F4-2FB8-4DBB-82DA-280E158E55EE</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BBBC73F4-2FB8-4DBB-82DA-280E158E55EE</key>
		<array/>
	</dict>
	<key>createdby</key>
	<string>Carlos Acedo</string>
	<key>description</key>
	<string>Search for Jira tickets</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Jira</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>skipqueryencode</key>
				<false/>
				<key>skipvarencode</key>
				<false/>
				<key>spaces</key>
				<string></string>
				<key>url</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>BBBC73F4-2FB8-4DBB-82DA-280E158E55EE</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>jira</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>#!/usr/bin/env python3
import sys
import json
import os
import requests
from urllib.parse import urlparse, urljoin
import re

def create_output(items):
    return json.dumps({"items": items})

def normalize_url(url):
    """Add https:// if no scheme is present."""
    if not url:
        return None

    parsed = urlparse(url)
    if not parsed.scheme:
        return f"https://{url}"
    return url

def main():
    # Get query from Alfred
    query = sys.argv[1] if len(sys.argv) &gt; 1 else ""

    # Your Jira credentials
    jira_url = normalize_url(os.getenv('jira_url'))
    api_token = os.getenv('jira_api_token')

    if not all([jira_url, api_token]):
        print(create_output([{
            "title": "Missing configuration",
            "subtitle": "Please set jira_url and jira_api_token in workflow variables",
            "valid": False
        }]))
        return

    # If query is too short, show waiting message
    if len(query) &lt; 2:
        print(create_output([{
            "title": "Type at least 2 characters to search",
            "subtitle": "Waiting for input...",
            "valid": False
        }]))
        return

    try:
        # Determine if the query is a potential issue key
        issue_key_pattern = re.compile(r'^[A-Z]+-\d+$')
        if issue_key_pattern.match(query):
            jql_query = f'key = "{query}"'
        else:
            jql_query = f'text ~ "{query}"'

        print(f"JQL Query: {jql_query}", file=sys.stderr)  # Log the JQL query

        # Make request to Jira
        api_endpoint = urljoin(jira_url, "/rest/api/2/search")
        response = requests.get(
            api_endpoint,
            params={
                'jql': jql_query,
                'maxResults': 10,
                'fields': 'summary,status'
            },
            headers={
                'Authorization': f'Bearer {api_token}',
                'Accept': 'application/json'
            },
            timeout=2
        )

        if response.status_code != 200:
            print(create_output([{
                "title": f"Error: {response.status_code}",
                "subtitle": response.text,
                "valid": False
            }]))
            return

        issues = response.json().get('issues', [])

        if not issues:
            print(create_output([{
                "title": "No results found",
                "subtitle": "Try a different search term",
                "valid": False
            }]))
            return

        # Create items for Alfred
        items = []
        for issue in issues:
            items.append({
                "title": f"{issue['key']}: {issue['fields']['summary']}",
                "subtitle": f"Status: {issue['fields']['status']['name']}",
                "arg": urljoin(jira_url, f"/browse/{issue['key']}"),
                "valid": True
            })

        print(create_output(items))

    except Exception as e:
        print(create_output([{
            "title": "Error occurred",
            "subtitle": str(e),
            "valid": False
        }]))

if __name__ == '__main__':
    main()
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Jira Search</string>
				<key>type</key>
				<integer>9</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>4989EA22-8408-4AAD-BA8E-3DBB4D2035E7</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>## Generate an API Token

Jira uses API tokens for authentication. Here's how to generate one:

1. **Log In to Jira:** Go to your Jira instance and log in with your credentials.
2. **Access API Tokens:** Click on your profile avatar in the bottom-left corner, then select "Account settings."
3. **Create an API Token:**

   - In the left-hand menu, click on "Security."

   - Under the "API token" section, click on "Create and manage API tokens."

   - Click on "Create API token."

   - Give your token a label (e.g., "Alfred Workflow") and click "Create."

   - Copy the generated token and store it securely. You will need it to configure the workflow.</string>
	<key>uidata</key>
	<dict>
		<key>4989EA22-8408-4AAD-BA8E-3DBB4D2035E7</key>
		<dict>
			<key>xpos</key>
			<real>325</real>
			<key>ypos</key>
			<real>135</real>
		</dict>
		<key>BBBC73F4-2FB8-4DBB-82DA-280E158E55EE</key>
		<dict>
			<key>xpos</key>
			<real>770</real>
			<key>ypos</key>
			<real>135</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Jira URL</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>jira_url</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Jira User</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>jira_email</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Jira Token</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>jira_api_token</string>
		</dict>
	</array>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>0.0.2</string>
	<key>webaddress</key>
	<string>https://github.com/cacedo/alfred</string>
</dict>
</plist>
